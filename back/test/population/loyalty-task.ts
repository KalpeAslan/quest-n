import { getRepository } from 'typeorm';
import { LoyaltyProject, LoyaltyTask } from '../../src/db/entity';
import { LoyaltyTaskType } from '../../src/db/types/interfaces/loyalty';

export const populateLoyaltyTasks = async () => {
  const loyaltyTaskRepository = getRepository(LoyaltyTask);
  const loyaltyProjectRepository = getRepository(LoyaltyProject);
  const loyaltyProjects = await loyaltyProjectRepository.find({});

  const tasks = [
    {
      title: 'Task 1 Title',
      points: 100,
      localizationId: 'localizationId1',
      startAt: null,
      endAt: null,
      type: LoyaltyTaskType.VisitLink,
      body: {},
      sortOrder: 1,
      required: false,
      loyaltyProjectId: loyaltyProjects[0].id,
    },
    {
      title: 'Required task',
      points: 100,
      localizationId: 'localizationId1',
      startAt: null,
      endAt: null,
      type: LoyaltyTaskType.VisitLink,
      body: {},
      sortOrder: 1,
      required: true,
      loyaltyProjectId: loyaltyProjects[0].id,
    },
    {
      title: 'Task 2 Title',
      points: 200,
      localizationId: null,
      startAt: null,
      endAt: new Date(),
      type: LoyaltyTaskType.ImageUpload,
      body: {},
      sortOrder: 2,
      required: false,
      loyaltyProjectId: loyaltyProjects[1].id,
    },
    {
      title: 'Task 3 Title',
      points: 50,
      localizationId: 'localizationId3',
      startAt: new Date(),
      endAt: null,
      type: LoyaltyTaskType.TweetTwitter,
      body: {
        isOnboardingTask: false,
      },
      sortOrder: 3,
      required: false,
      loyaltyProjectId: loyaltyProjects[2].id,
    },
    {
      title: 'Task 4 Title',
      points: 50,
      localizationId: 'localizationId5',
      startAt: new Date(),
      endAt: null,
      type: LoyaltyTaskType.TweetTwitter,
      body: {
        isOnboardingTask: false,
      },
      sortOrder: 3,
      required: false,
      loyaltyProjectId: loyaltyProjects[2].id,
    },
    {
      title: 'token',
      points: 5,
      localizationId: 'localizationId5',
      startAt: new Date(),
      endAt: null,
      type: LoyaltyTaskType.Token,
      body: {
        address: '0x1a4f8db9c94e1b64381637d759492e3cf3ca5a0b',
        chainId: '0x5',
        description: '<p>Hold at least 1 CUSTOM ERC20 Token and get your points!</p>',
        minTokenAmount: 1,
      },
      sortOrder: 3,
      required: false,
      loyaltyProjectId: loyaltyProjects[2].id,
    },
    {
      title: 'nft',
      points: 5,
      localizationId: 'localizationId5',
      startAt: null,
      endAt: null,
      type: LoyaltyTaskType.NFT,
      body: {
        address: '0x32d346f28b1b193b5addd6d6c2e399b7623f5b9d',
        chainId: '0x5',
        standard: 'ERC721',
        description: '<p>Hold at least 1 CUSTOM NFTs and get your points!</p>',
        minTokenAmount: 1,
      },
      sortOrder: 3,
      required: false,
      loyaltyProjectId: loyaltyProjects[2].id,
    },
    {
      title: 'blockchainUser',
      points: 5,
      localizationId: 'localizationId5',
      startAt: null,
      endAt: null,
      type: LoyaltyTaskType.BlockchainUser,
      body: {
        chainId: '0x5',
        description: '<p>Make more than 1 transactions in Ethereum blockchain and get your points!</p>',
        minTransactions: 1,
      },
      sortOrder: 3,
      required: false,
      loyaltyProjectId: loyaltyProjects[2].id,
    },
    {
      title: 'nativeHolder',
      points: 5,
      localizationId: 'localizationId5',
      startAt: null,
      endAt: null,
      type: LoyaltyTaskType.NativeHolder,
      body: {
        chainId: '0x5',
        minValue: 0.1,
        description: '<p>Hold more than 0,1 Goerli ETH on your wallet and get your points!</p>',
      },
      sortOrder: 3,
      required: false,
      loyaltyProjectId: loyaltyProjects[2].id,
    },
    {
      title: 'checkSpaceTwitter',
      points: 5,
      localizationId: 'checkSpaceTwitter',
      startAt: null,
      endAt: null,
      type: LoyaltyTaskType.CheckSpaceTwitter,
      body: {},
      sortOrder: 3,
      required: false,
      loyaltyProjectId: loyaltyProjects[2].id,
    },
    {
      title: 'commentTweetTwitter',
      points: 5,
      localizationId: 'commentTweetTwitter',
      startAt: null,
      endAt: null,
      type: LoyaltyTaskType.CommentTweetTwitter,
      body: {},
      sortOrder: 3,
      required: false,
      loyaltyProjectId: loyaltyProjects[2].id,
    },
    {
      title: 'likeTweetTwitter',
      points: 5,
      localizationId: 'likeTweetTwitter',
      startAt: null,
      endAt: null,
      type: LoyaltyTaskType.LikeTweetTwitter,
      body: {},
      sortOrder: 3,
      required: false,
      loyaltyProjectId: loyaltyProjects[2].id,
    },
    {
      title: 'reTweetQuoteTwitter',
      points: 5,
      localizationId: 'reTweetQuoteTwitter',
      startAt: null,
      endAt: null,
      type: LoyaltyTaskType.ReTweetQuoteTwitter,
      body: {},
      sortOrder: 3,
      required: false,
      loyaltyProjectId: loyaltyProjects[2].id,
    },
    {
      title: 'reTweetTwitter',
      points: 5,
      localizationId: 'reTweetTwitter',
      startAt: null,
      endAt: null,
      type: LoyaltyTaskType.ReTweetTwitter,
      body: {},
      sortOrder: 3,
      required: false,
      loyaltyProjectId: loyaltyProjects[2].id,
    },
    {
      title: 'tweetTwitter',
      points: 5,
      localizationId: 'tweetTwitter',
      startAt: null,
      endAt: null,
      type: LoyaltyTaskType.TweetTwitter,
      body: {},
      sortOrder: 3,
      required: false,
      loyaltyProjectId: loyaltyProjects[2].id,
    },
    {
      title: 'mentionTwitter',
      points: 5,
      localizationId: 'mentionTwitter',
      startAt: null,
      endAt: null,
      type: LoyaltyTaskType.MentionTwitter,
      body: {},
      sortOrder: 3,
      required: false,
      loyaltyProjectId: loyaltyProjects[2].id,
    },
    {
      title: 'followTwitter',
      points: 5,
      localizationId: 'followTwitter',
      startAt: null,
      endAt: null,
      type: LoyaltyTaskType.FollowTwitter,
      body: {},
      sortOrder: 3,
      required: false,
      loyaltyProjectId: loyaltyProjects[2].id,
    },
    {
      title: 'joinDiscord',
      points: 5,
      localizationId: 'joinDiscord',
      startAt: null,
      endAt: null,
      type: LoyaltyTaskType.JoinDiscord,
      body: {
        serverId: '1158313063515160678',
        inviteLink: 'https://discord.gg/WrfeNzCa',
        description: 'Join our project on Discord and get your points!',
      },
      sortOrder: 3,
      required: false,
      loyaltyProjectId: loyaltyProjects[2].id,
    },
    {
      title: 'joinDiscord',
      points: 5,
      localizationId: 'joinDiscord',
      startAt: null,
      endAt: null,
      type: LoyaltyTaskType.JoinDiscord,
      body: {
        serverId: '858516330432299008',
        inviteLink: 'https://discord.gg/NkyvEjgh',
        description: 'Join our project on Discord and get your points!',
      },
      sortOrder: 3,
      required: false,
      loyaltyProjectId: loyaltyProjects[2].id,
    },
    {
      title: 'roleDiscord',
      points: 5,
      localizationId: 'roleDiscord',
      startAt: null,
      endAt: null,
      type: LoyaltyTaskType.RoleDiscord,
      body: {
        roleId: '1158313554768842832',
        roleName: 'test-role',
        serverId: '1158313063515160678',
        description: 'DIcrord Task',
      },
      sortOrder: 3,
      required: false,
      loyaltyProjectId: loyaltyProjects[2].id,
    },
    {
      title: 'joinTelegram',
      points: 5,
      localizationId: 'joinTelegram',
      startAt: null,
      endAt: null,
      type: LoyaltyTaskType.JoinTelegram,
      body: {
        chatId: '-1001936460012',
        inviteLink: 'https://t.me/testalphakairat',
        description: 'Become a part of our Telegram community and get your points!',
      },
      sortOrder: 3,
      required: false,
      loyaltyProjectId: loyaltyProjects[2].id,
    },
  ];

  for (const task of tasks) {
    const loyaltyTasks = await loyaltyTaskRepository.create(task as LoyaltyTask);
    await loyaltyTaskRepository.save(loyaltyTasks);
  }
};
