import { createContext } from "use-context-selector";
import {
  WagmiConfig,
  createConfig,
  configureChains,
  createStorage,
  Chain,
} from "wagmi";
import {
  EthereumClient,
  w3mConnectors,
  w3mProvider,
} from "@web3modal/ethereum";
import { infuraProvider } from "wagmi/providers/infura";
import { LocalStorageService } from "@services";
import { appConfig } from "@/app.config";
import {
  arbitrum,
  arbitrumGoerli,
  aurora,
  auroraTestnet,
  avalanche,
  avalancheFuji,
  base,
  baseGoerli,
  boba,
  bronos,
  bronosTestnet,
  bsc,
  bscTestnet,
  bxn,
  bxnTestnet,
  canto,
  celo,
  celoAlfajores,
  celoCannoli,
  cronos,
  cronosTestnet,
  crossbell,
  dfk,
  dogechain,
  edgeware,
  edgewareTestnet,
  evmos,
  evmosTestnet,
  fantom,
  fantomTestnet,
  fibo,
  filecoin,
  filecoinCalibration,
  filecoinHyperspace,
  flare,
  flareTestnet,
  foundry,
  gnosis,
  gnosisChiado,
  goerli,
  haqqMainnet,
  haqqTestedge2,
  hardhat,
  harmonyOne,
  iotex,
  iotexTestnet,
  klaytn,
  lineaTestnet,
  mantle,
  mantleTestnet,
  metis,
  metisGoerli,
  mev,
  mevTestnet,
  moonbaseAlpha,
  moonbeam,
  moonriver,
  mainnet,
  nexi,
  nexilix,
  okc,
  optimism,
  optimismGoerli,
  polygonMumbai,
  polygonZkEvm,
  polygonZkEvmTestnet,
  pulsechain,
  pulsechainV4,
  polygon,
  scrollTestnet,
  sepolia,
  shardeumSphinx,
  skaleBlockBrawlers,
  skaleCalypso,
  skaleCalypsoTestnet,
  skaleChaosTestnet,
  skaleCryptoBlades,
  skaleCryptoColosseum,
  skaleEuropa,
  skaleEuropaTestnet,
  skaleExorde,
  skaleHumanProtocol,
  skaleNebula,
  skaleNebulaTestnet,
  skaleRazor,
  skaleTitan,
  skaleTitanTestnet,
  songbird,
  songbirdTestnet,
  syscoin,
  taikoTestnetSepolia,
  taraxa,
  taraxaTestnet,
  telos,
  telosTestnet,
  thunderTestnet,
  wanchain,
  wanchainTestnet,
  xdc,
  xdcTestnet,
  zhejiang,
  zkSync,
  zkSyncTestnet,
  zora,
  zoraTestnet,
} from "wagmi/chains";
import { Web3Modal } from "@web3modal/react";

export const WagmiContext = createContext<Partial<IWagmiContext>>({});

interface IWagmiContext {
  networks: Chain[];
}

const projectId = appConfig.NEXT_PUBLIC_WALLET_CONNECT_PROJECT_ID;
const chains = [
  arbitrum,
  arbitrumGoerli,
  aurora,
  auroraTestnet,
  avalanche,
  avalancheFuji,
  base,
  baseGoerli,
  boba,
  bronos,
  bronosTestnet,
  bsc,
  bscTestnet,
  bxn,
  bxnTestnet,
  canto,
  celo,
  celoAlfajores,
  celoCannoli,
  cronos,
  cronosTestnet,
  crossbell,
  dfk,
  dogechain,
  edgeware,
  edgewareTestnet,
  evmos,
  evmosTestnet,
  fantom,
  fantomTestnet,
  fibo,
  filecoin,
  filecoinCalibration,
  filecoinHyperspace,
  flare,
  flareTestnet,
  foundry,
  gnosis,
  gnosisChiado,
  goerli,
  haqqMainnet,
  haqqTestedge2,
  hardhat,
  harmonyOne,
  iotex,
  iotexTestnet,
  klaytn,
  lineaTestnet,
  mantle,
  mantleTestnet,
  metis,
  metisGoerli,
  mev,
  mevTestnet,
  moonbaseAlpha,
  moonbeam,
  moonriver,
  mainnet,
  nexi,
  nexilix,
  okc,
  optimism,
  optimismGoerli,
  polygonMumbai,
  polygonZkEvm,
  polygonZkEvmTestnet,
  pulsechain,
  pulsechainV4,
  polygon,
  scrollTestnet,
  sepolia,
  shardeumSphinx,
  skaleBlockBrawlers,
  skaleCalypso,
  skaleCalypsoTestnet,
  skaleChaosTestnet,
  skaleCryptoBlades,
  skaleCryptoColosseum,
  skaleEuropa,
  skaleEuropaTestnet,
  skaleExorde,
  skaleHumanProtocol,
  skaleNebula,
  skaleNebulaTestnet,
  skaleRazor,
  skaleTitan,
  skaleTitanTestnet,
  songbird,
  songbirdTestnet,
  syscoin,
  taikoTestnetSepolia,
  taraxa,
  taraxaTestnet,
  telos,
  telosTestnet,
  thunderTestnet,
  wanchain,
  wanchainTestnet,
  xdc,
  xdcTestnet,
  zhejiang,
  zkSync,
  zkSyncTestnet,
  zora,
  zoraTestnet,
];

const { publicClient } = configureChains(chains, [
  w3mProvider({ projectId }),
  infuraProvider({
    apiKey: appConfig.NEXT_PUBLIC_INFURA_ID || "",
  }),
]);

const wagmiConfig = createConfig({
  storage: createStorage({ storage: LocalStorageService }),
  autoConnect: true,
  connectors: [...w3mConnectors({ projectId, chains })],
  publicClient,
});
const ethereumClient = new EthereumClient(wagmiConfig, chains);

export const WagmiProvider = ({ children }) => {
  const value = {
    networks: chains,
  };

  return (
    <>
      <WagmiConfig config={wagmiConfig}>
        <WagmiContext.Provider value={value}>{children}</WagmiContext.Provider>
      </WagmiConfig>

      <Web3Modal
        projectId={projectId}
        ethereumClient={ethereumClient}
        enableAccountView={false}
        enableNetworkView={false}
        themeVariables={{ "--w3m-z-index": "10000" }}
        defaultChain={mainnet}
      />
    </>
  );
};
